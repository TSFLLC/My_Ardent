A1) Run this single SQL script in SSMS (Dev DB)
/* ===== 0) Fresh schema ===== */
IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE name='kpi') EXEC('CREATE SCHEMA kpi');
IF OBJECT_ID('kpi.vKPI_OnePager','V') IS NOT NULL DROP VIEW kpi.vKPI_OnePager;
IF OBJECT_ID('kpi.Department','U')  IS NOT NULL DROP TABLE kpi.Department;
IF OBJECT_ID('kpi.Pillar','U')      IS NOT NULL DROP TABLE kpi.Pillar;
IF OBJECT_ID('kpi.Objective','U')   IS NOT NULL DROP TABLE kpi.Objective;
IF OBJECT_ID('kpi.Priority','U')    IS NOT NULL DROP TABLE kpi.Priority;
IF OBJECT_ID('kpi.KPI','U')         IS NOT NULL DROP TABLE kpi.KPI;
GO

/* ===== 1) Base tables (minimal + deterministic order) ===== */
CREATE TABLE kpi.Department (
  DeptCode     varchar(10)  NOT NULL PRIMARY KEY,
  Department   varchar(200) NOT NULL,
  Leader       varchar(200) NULL
);

CREATE TABLE kpi.Pillar (
  PillarID     varchar(10)  NOT NULL PRIMARY KEY,
  Pillar       varchar(200) NOT NULL,
  DisplayOrder int          NOT NULL
);

CREATE TABLE kpi.Objective (
  ObjectID     varchar(10)  NOT NULL PRIMARY KEY,
  Objective    varchar(200) NOT NULL,
  PillarID     varchar(10)  NOT NULL,
  DisplayOrder int          NOT NULL,
  CONSTRAINT FK_Objective_Pillar FOREIGN KEY (PillarID) REFERENCES kpi.Pillar(PillarID)
);

CREATE TABLE kpi.Priority (
  PriorityID   varchar(10)  NOT NULL PRIMARY KEY,
  Priority     varchar(400) NOT NULL,
  DeptCode     varchar(10)  NOT NULL,
  ObjectID     varchar(10)  NOT NULL,
  [Year]       int          NOT NULL,
  [Quarter]    char(2)      NOT NULL, -- 'Q1'..'Q4'
  DisplayOrder int          NOT NULL,
  CONSTRAINT FK_Priority_Department FOREIGN KEY (DeptCode) REFERENCES kpi.Department(DeptCode),
  CONSTRAINT FK_Priority_Objective  FOREIGN KEY (ObjectID)  REFERENCES kpi.Objective(ObjectID)
);

CREATE TABLE kpi.KPI (
  KPIID        varchar(10)  NOT NULL PRIMARY KEY,
  KPI          varchar(400) NOT NULL,
  PriorityID   varchar(10)  NOT NULL,
  DisplayOrder int          NOT NULL,
  CONSTRAINT FK_KPI_Priority FOREIGN KEY (PriorityID) REFERENCES kpi.Priority(PriorityID)
);

/* Helpful indexes */
CREATE INDEX IX_Priority_Period  ON kpi.Priority([Year],[Quarter],DeptCode);
CREATE INDEX IX_Obj_PillarOrder  ON kpi.Objective(PillarID, DisplayOrder);
CREATE INDEX IX_KPI_PriOrder     ON kpi.KPI(PriorityID, DisplayOrder);

/* ===== 2) Seed the bare minimum so the app shows data ===== */
INSERT INTO kpi.Department(DeptCode,Department,Leader) VALUES
('EDG','Enterprise Data Governance','Mallesh Manchala'),
('EDM','Enterprise Data Management','David Sesler'),
('EDP','Enterprise Data Products','Jeanette Tlucek'),
('EAA','Enterprise Advanced Analy','Nidhi Goel');

INSERT INTO kpi.Pillar(PillarID,Pillar,DisplayOrder) VALUES
('PIL001','People First',1),('PIL002','Value Driven',2),
('PIL003','Consumer Centered',3),('PIL004','Growth Minded',4);

INSERT INTO kpi.Objective(ObjectID,Objective,PillarID,DisplayOrder) VALUES
('OBJ0001','Empowerment','PIL001',1),
('OBJ0002','Collaboration','PIL001',2),
('OBJ0003','Celebration','PIL001',3),
('OBJ0004','Product Delivery','PIL002',1),
('OBJ0005','Stewardship','PIL002',2),
('OBJ0006','Ease of use','PIL003',1),
('OBJ0007','Frictionless experience','PIL003',2),
('OBJ0008','Modernization (M)','PIL004',1),
('OBJ0009','Purposeful Transformation (PT)','PIL004',2);

/* EDG Only (2025/Q3) — keep tiny to test end-to-end; you can add more later */
INSERT INTO kpi.Priority(PriorityID,Priority,DeptCode,ObjectID,[Year],[Quarter],DisplayOrder) VALUES
('PRI0001','Cherish in production 75% while leaders use Replenish in pilot (All)','EDG','OBJ0001',2025,'Q3',1),
('PRI0002','Operationalize provider/location workgroups','EDG','OBJ0004',2025,'Q3',2),
('PRI0003','Reliable front doors via ServiceNow (All)','EDG','OBJ0006',2025,'Q3',3),
('PRI0004','Setup Data Catalog tooling (M/PT)','EDG','OBJ0008',2025,'Q3',4);

INSERT INTO kpi.KPI(KPIID,KPI,PriorityID,DisplayOrder) VALUES
('KPI0001','Each leader uses Cherish/Replenish in at least 1 MOR','PRI0001',1),
('KPI0002','Define provider critical data elements + rules + ownership','PRI0002',1),
('KPI0003','Standardize reporting of data quality issues in ServiceNow','PRI0003',1),
('KPI0004','Finalize vendor for Data Catalog (end of Q3)','PRI0004',1);

/* ===== 3) View the app will read ===== */
CREATE VIEW kpi.vKPI_OnePager
AS
WITH Obj AS (
  SELECT o.PillarID, p.DeptCode, p.[Year], p.[Quarter],
         STRING_AGG(CONCAT(CHAR(10), CHAR(64+o.DisplayOrder), '. ', o.Objective),'')
           WITHIN GROUP (ORDER BY o.DisplayOrder) AS ObjectivesText
  FROM kpi.Priority p
  JOIN kpi.Objective o ON o.ObjectID = p.ObjectID
  GROUP BY o.PillarID, p.DeptCode, p.[Year], p.[Quarter]
),
Pri AS (
  SELECT o.PillarID, p.DeptCode, p.[Year], p.[Quarter],
         STRING_AGG(CONCAT(CHAR(10), p.DisplayOrder, '. ', p.Priority),'')
           WITHIN GROUP (ORDER BY p.DisplayOrder) AS PrioritiesText
  FROM kpi.Priority p
  JOIN kpi.Objective o ON o.ObjectID = p.ObjectID
  GROUP BY o.PillarID, p.DeptCode, p.[Year], p.[Quarter]
),
Kpi AS (
  SELECT o.PillarID, p.DeptCode, p.[Year], p.[Quarter],
         STRING_AGG(CONCAT(CHAR(10), k.DisplayOrder, '. ', k.KPI),'')
           WITHIN GROUP (ORDER BY k.DisplayOrder) AS KPIsText
  FROM kpi.KPI k
  JOIN kpi.Priority p ON p.PriorityID = k.PriorityID
  JOIN kpi.Objective o ON o.ObjectID = p.ObjectID
  GROUP BY o.PillarID, p.DeptCode, p.[Year], p.[Quarter]
)
SELECT d.Department, d.DeptCode, p.[Year], p.[Quarter],
       pil.PillarID, pil.Pillar, pil.DisplayOrder AS PillarDisplayOrder,
       o.ObjectivesText, pr.PrioritiesText, k.KPIsText, d.Leader
FROM kpi.Pillar pil
JOIN (SELECT DISTINCT ObjectID, DeptCode, [Year], [Quarter] FROM kpi.Priority) p
  ON EXISTS (SELECT 1 FROM kpi.Objective o2 WHERE o2.ObjectID = p.ObjectID AND o2.PillarID = pil.PillarID)
JOIN kpi.Department d ON d.DeptCode = p.DeptCode
LEFT JOIN Obj o  ON o.PillarID=pil.PillarID AND o.DeptCode=d.DeptCode AND o.[Year]=p.[Year] AND o.[Quarter]=p.[Quarter]
LEFT JOIN Pri pr ON pr.PillarID=pil.PillarID AND pr.DeptCode=d.DeptCode AND pr.[Year]=p.[Year] AND pr.[Quarter]=p.[Quarter]
LEFT JOIN Kpi k  ON k.PillarID=pil.PillarID AND k.DeptCode=d.DeptCode AND k.[Year]=p.[Year] AND k.[Quarter]=p.[Quarter]
GROUP BY d.Department, d.DeptCode, p.[Year], p.[Quarter],
         pil.PillarID, pil.Pillar, pil.DisplayOrder,
         o.ObjectivesText, pr.PrioritiesText, k.KPIsText, d.Leader;
GO

/* ===== 4) Quick smoke test ===== */
SELECT TOP 4 Pillar, ObjectivesText, PrioritiesText, KPIsText
FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;


Keep the column names exactly as above—Power Apps formulas below expect them.

Part B — Power Apps: build the app cleanly

We’ll avoid confusing formulas and use one data source (the view) for the gallery.

B1) Create app and add SQL connection

Create → Canvas app (Tablet).

Add data → SQL Server → use your read-only login → pick your DB.

Select:

View: kpi_vKPI_OnePager

Tables: kpi_Department and kpi_Priority (for dropdown choices only)

Power Apps will show data sources named something like:

kpi_vKPI_OnePager

kpi_Department

kpi_Priority

B2) App variables (App → OnStart)
// Calculate defaults
Set(varToday, Today());
Set(varYear, 2025);        // keep explicit for now to match seed
Set(varQuarter, "Q3");
Set(varDept, "EDG");

// Preload dropdown data
ClearCollect(colDepts, Sort(kpi_Department, Department, Ascending));
ClearCollect(colQuarters, ["Q1","Q2","Q3","Q4"]);
// Build Years list from actual data in Priority (distinct int)
ClearCollect(colYears, Sort(Distinct(kpi_Priority, Year), Result, Descending));


Now Run OnStart (or close/reopen) so collections populate.

B3) Add the 3 dropdowns

Add a Horizontal container, then three Dropdown controls:

Department (ddDept)

Items: colDepts

Value: "Department"

Default: LookUp(colDepts, DeptCode = varDept).Department

OnChange: Set(varDept, ddDept.Selected.DeptCode)

Quarter (ddQuarter)

Items: colQuarters

Default: varQuarter

OnChange: Set(varQuarter, ddQuarter.Selected)

Year (ddYear)

Items: colYears

Default: varYear

OnChange: Set(varYear, Value(ddYear.Selected.Result))

If you get an “Invalid argument type” on the Year dropdown, it means the Result is text—wrap with Value() like we did.

B4) Add the gallery (galRows)

Insert a Vertical gallery, turn Flexible height = On.

Items:

// Use a local alias to keep it readable and avoid name collisions
With(
    { src: kpi_vKPI_OnePager },
    SortByColumns(
        Filter(
            src,
            DeptCode = varDept &&
            Year = varYear &&
            Quarter = varQuarter
        ),
        "PillarDisplayOrder", Ascending
    )
)


If Power Apps complains it can’t find columns, it usually means the data source name is different in your app. Check the Data pane and adjust kpi_vKPI_OnePager to your actual connector name.

Inside the gallery add a Horizontal container with 4 Labels.
For each label: set Wrap = On and AutoHeight = On.

Label 1 (Pillar): ThisItem.Pillar

Label 2 (Objectives): ThisItem.ObjectivesText

Label 3 (Priorities): ThisItem.PrioritiesText

Label 4 (KPIs): ThisItem.KPIsText

Add a header row above the gallery:

“Ardent Pillar”, “TCS Objectives”, “Enterprise D&A Qx Priorities”, and

"KPIs (" & Coalesce(First(
   Filter(kpi_vKPI_OnePager, DeptCode=varDept && Year=varYear && Quarter=varQuarter)
).Leader, "Leader") & ")"

B5) Quick checks

Set ddDept to EDG, ddYear to 2025, ddQuarter to Q3 → you should see 4 rows (one per pillar with text where seeded).

Change Dept/Year/Quarter → if there’s no data for that selection, the gallery becomes empty (expected).

Optional Empty-state label under the filters:

// Visible:
CountRows(
  Filter(kpi_vKPI_OnePager, DeptCode=varDept && Year=varYear && Quarter=varQuarter)
) = 0
// Text: "No KPI rows for this selection."

Part C — Common “Items” errors & fixes

“Invalid argument type” on Year comparisons
→ Ensure varYear is a number (Set(varYear, 2025)) and your dropdown uses Value(ddYear.Selected.Result).

“The property expects a Table value”
→ Your Items formula must return a table. Copy the With(... SortByColumns(Filter(...))) block exactly.

“Column name not recognized”
→ In Power Apps, the actual data source name might be kpi_vKPI_OnePager_1 etc. Replace kpi_vKPI_OnePager with the correct name from the Data pane.
→ Also make sure your SQL view exposes exact column names used above (DeptCode, Year, Quarter, PillarDisplayOrder, etc.).

No rows showing
→ Verify the SQL seed has a row for your selection (e.g., EDG/2025/Q3). Run:

SELECT * FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;

Want to add more departments/quarters?

Insert more rows into kpi.Priority (and kpi.KPI) for the desired DeptCode, Year, Quarter. The view and app will reflect them automatically.

If you follow the script + Power Apps formulas above, the gallery should bind cleanly without query errors. If anything still errors, tell me the exact red underline message and I’ll adjust the formula to your connector names on the spot.


////////////////////////////////////////////////////////////////////////////////////////


// Defaults
Set(varYear, 2025);
Set(varQuarter, "Q3");
Set(varDept, "EDG");

// Departments (note the quotes around names with dots)
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// Quarters (give the field a name so the dropdown is easy)
ClearCollect(
    colQuarters,
    Table({Q:"Q1"},{Q:"Q2"},{Q:"Q3"},{Q:"Q4"})
);

// ---- Years (bullet-proof, 2 steps) ----
// Step 1: get distinct years into a temp collection; the single column is named Result
ClearCollect(tmpYears, Distinct('kpi.Priority', Year));

// Step 2: add a numeric field 'Y' from Result, then sort and store as colYears
ClearCollect(
    colYears,
    SortByColumns(
        AddColumns(tmpYears, "Y", Value(Result)),
        "Y",
        SortOrder.Descending
    )
);

// Optional: clean up temp
Clear(tmpYears);
3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333

// Step 1: group by Year to get uniques, then keep only the Year column
ClearCollect(
    tmpYears,
    ShowColumns(
        GroupBy('kpi.Priority', "Year", "grp"),
        "Year"
    )
);

// Step 2: if Year is text, coerce to number in Y; then sort and store in colYears
ClearCollect(
    colYears,
    SortByColumns(
        AddColumns(tmpYears, "Y", Value(Year)),
        "Y",
        SortOrder.Descending
    )
);

// Optional: clean up temp
Clear(tmpYears);
This avoids Distinct(Result) entirely. After GroupBy(...), we have a table with a real Year column, which we then coerce to numeric as Y and sort.

Make sure your other OnStart lines still look like this
powerfx
Copy code
Set(varYear, 2025);
Set(varQuarter, "Q3");
Set(varDept, "EDG");

ClearCollect(colDepts,    SortByColumns('kpi.Department', "Department", SortOrder.Ascending));
ClearCollect(colQuarters, Table({Q:"Q1"},{Q:"Q2"},{Q:"Q3"},{Q:"Q4"}));


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Step 1 — Add a tiny SQL view for Years

Run this in your DB (same place as your kpi schema):

CREATE OR ALTER VIEW kpi.vYears
AS
SELECT DISTINCT CAST([Year] AS int) AS Y
FROM kpi.Priority;
GO


(Optional: if you want only years that have data for the current department, you can later change it to SELECT DISTINCT CAST([Year] AS int) AS Y, DeptCode FROM kpi.Priority and filter by DeptCode in Power Apps. Start simple first.)

Step 2 — Add the new view to Power Apps

In the Data pane:

Add data → SQL Server → same connection → check kpi_vYears (it may appear as 'kpi.vYears').

If you don’t see it, click the “…” on the SQL connection → Refresh.

Step 3 — Use bullet-proof OnStart (no Distinct/GroupBy in Power Fx)

Copy/paste exactly (note the single quotes around names with dots):

// Defaults
Set(varYear, 2025);
Set(varQuarter, "Q3");
Set(varDept, "EDG");

// Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// Quarters
ClearCollect(
    colQuarters,
    Table({Q:"Q1"},{Q:"Q2"},{Q:"Q3"},{Q:"Q4"})
);

// Years (from SQL view)
ClearCollect(
    colYears,
    SortByColumns('kpi.vYears', "Y", SortOrder.Descending)
);


Then click App (left tree) → Run OnStart.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Step 4 — Wire the three dropdowns

Department (ddDept)

Items: colDepts

Value: "Department"

Default: LookUp(colDepts, DeptCode = varDept).Department

OnChange: Set(varDept, ddDept.Selected.DeptCode)

Quarter (ddQuarter)

Items: colQuarters

Value: "Q"

Default: varQuarter

OnChange: Set(varQuarter, ddQuarter.Selected.Q)

Year (ddYear)

Items: colYears

Value: "Y"

Default: varYear

OnChange: Set(varYear, ddYear.Selected.Y)

Step 5 — Gallery Items

If your view shows in the data pane as 'kpi.vKPI_OnePager' use that; otherwise use the exact name you see.

With(
    { src: 'kpi.vKPI_OnePager' },
    SortByColumns(
        Filter(
            src,
            DeptCode = varDept &&
            Year     = varYear &&
            Quarter  = varQuarter
        ),
        "PillarDisplayOrder",
        SortOrder.Ascending
    )
)


Inside the gallery add four labels (Wrap = On, AutoHeight = On):

ThisItem.Pillar

ThisItem.ObjectivesText

ThisItem.PrioritiesText

ThisItem.KPIsText

Optional header (shows leader):

"KPIs (" &
Coalesce(
  First(
    Filter('kpi.vKPI_OnePager', DeptCode=varDept && Year=varYear && Quarter=varQuarter)
  ).Leader,
  "Leader"
) & ")"

Quick checks

Add a temp label: CountRows('kpi.vYears') → should show a number.

Add a temp label: First('kpi.vYears').Y → should show a year (e.g., 2025).

CountRows('kpi.vKPI_OnePager') → confirms the main view is reachable.

Common gotchas (fast fixes)

Names with dots must be in single quotes: 'kpi.Department', 'kpi.vYears', 'kpi.vKPI_OnePager'.

After creating a new SQL object, Refresh the SQL connection in Power Apps.

If your data source appears with a suffix (e.g., kpi_vKPI_OnePager_1), use that exact name in the formula.

If you still see errors, tell me the exact names shown in the Data pane for:

Department table

Priority table

KPI one-pager view

vYears view
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Col 1: ThisItem.Pillar

Col 2: ThisItem.ObjectivesText

Col 3: ThisItem.PrioritiesText

Col 4: ThisItem.KPIsText

Wrap = true

AutoHeight = true

Width = Parent.Width/4

------------------------------------------------------

lblHdrPillar, lblHdrObjectives, lblHdrPriorities, lblHdrKPIs

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
lblHdrPillar.Text = "Ardent Pillar"

lblHdrObjectives.Text = "TCS Objectives"

lblHdrPriorities.Text = "Enterprise D&A Qx Priorities"

lblHdrKPIs.Text = (this is the dynamic one)

"KPIs (" &
Coalesce(
  First(
    Filter('kpi.vKPI_OnePager', DeptCode=varDept && Year=varYear && Quarter=varQuarter)
  ).Leader,
  "Leader"
) & ")"

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Title bar (top of screen, above the dropdowns)

Insert a Label named lblTitle:

Text

With(
  {deptName: LookUp(colDepts, DeptCode = varDept).Department},
  deptName & " " & varQuarter & " " & Text(varYear) & " KPIs One Pager"
)


FontWeight: FontWeight.Semibold

Size: 24

Fill: ColorValue("#E9EEF7") (light band)

PaddingLeft: 12

2) Column headers row (outside the gallery)

Create a container named HeaderRow (horizontal). Add 4 labels:

lblHdrPillar.Text = "Ardent Pillar"

lblHdrObjectives.Text = "TCS Objectives"

lblHdrPriorities.Text = "Enterprise D&A Qx Priorities"

lblHdrKpis.Text

"KPIs (" &
Coalesce(
  First(
    Filter('kpi.vKPI_OnePager', DeptCode=varDept && Year=varYear && Quarter=varQuarter)
  ).Leader,
  "Leader"
) & ")"


For each header label:

Fill: ColorValue("#0B2A5B") (dark navy)

Color: Color.White

FontWeight: FontWeight.Semibold

Padding: L/R 12, T/B 8

Width: Parent.Width/4 (or FillPortion = 1 if your container supports it)

BorderThickness: 1

BorderColor: ColorValue("#0B2A5B")

3) Gallery (classic vertical, galRows)

Items

With(
    { src: 'kpi.vKPI_OnePager' },
    SortByColumns(
        Filter(src, DeptCode = varDept && Year = varYear && Quarter = varQuarter),
        "PillarDisplayOrder",
        SortOrder.Ascending
    )
)


FlexibleHeight: true

TemplatePadding: 8

TemplateSize: 72 (row will expand as text wraps)

ShowNavigation: false

BorderStyle: BorderStyle.None
Row background (to get the four blue tiles look)

Inside the gallery template, add 4 Rectangles (one per column) spanning each quarter of the width. Set for all rectangles:

Height: Parent.TemplateHeight - 8 (or Parent.Height - 8 if using FlexibleHeight)

Y: 4

Width: Parent.Width/4

X:

Rect1: 0

Rect2: Parent.Width/4

Rect3: Parent.Width/2

Rect4: Parent.Width*3/4

Fill: use slightly different shades per column and vary a bit by row:

// For Rect1 (Pillar)
Switch(
  ThisItem.PillarDisplayOrder,
  1, ColorValue("#0B2A5B"),   // darkest
  2, ColorValue("#113D85"),
  3, ColorValue("#1F6FB2"),
  ColorValue("#57B6C6")       // default / 4
)


For Rect2/Rect3/Rect4, use lighter tints to match the slide:

Rect2 Fill: ColorValue("#153A7C"), #1C4F9D, #2A7BC4, #6BC3D1 (use a Switch like above)

Rect3 Fill: #1A4A97, #2365B1, #3490CE, #8ED6DD

Rect4 Fill: #2564AE, #2E7FC5, #49A7D7, #BCE9EB

You can keep the same color per row for all columns if you prefer; the slide shows a subtle column shade variation, but it’s optional.

The 4 data labels (on top of rectangles)

Add 4 Labels; set them to be transparent and auto size:

Common for all 4:

Wrap: true

AutoHeight: true

Color: Color.White

Padding: 12

Width: Parent.Width/4

Y: 8 (a bit below the top edge)

X:

Label1: 0

Label2: Parent.Width/4

Label3: Parent.Width/2

Label4: Parent.Width*3/4

Texts:

Label1 (Pillar number + name)

ThisItem.PillarDisplayOrder & ". " & ThisItem.Pillar


FontWeight: FontWeight.Semibold

Label2 (Objectives)
ThisItem.ObjectivesText

Label3 (Priorities)
ThisItem.PrioritiesText

Label4 (KPIs)
ThisItem.KPIsText

Thin white separators (optional)

Add a Rectangle with Fill = Color.White, Width = 1 at X = Parent.Width/4, Parent.Width/2, Parent.Width*3/4, Height = Parent.TemplateHeight - 8. This matches the grid lines in the slide.

4) Remove default gallery chrome

Delete or hide the default NextArrow, Separator, and Title that came with the gallery template.

5) Header sublabels (sub-headings above each column)

Under HeaderRow, insert a very thin Rectangle (height 2, fill #0B2A5B) across the full width to emulate the thick top rule from the slide.

6) Spacing & scrolling polish

On galRows: ShowScrollbar = true, ScrollBarThickness = 8.

Screen Fill: ColorValue("#F6F8FB") (very light gray/blue).

To reduce row “air”, try TemplatePadding 6 and Label Padding 8.

7) Optional: tighter numbering for Objectives/Priors/KPIs

If you want slightly larger numerals/letters like the slide:

For Label2 display (Objectives): the view already returns A., B., C. prefixes. If you ever need to force it in the app (not needed now):
Substitute(ThisItem.ObjectivesText, Char(10), Char(10)) (keeps lines).

For Label3/Label4 lists, numbers come from SQL order. If you want bullets instead of numbers:
Substitute(ThisItem.PrioritiesText, "1.", "•") (and cascade for 2..n). I’d keep numbering—it matches the slide.

Quick checklist (to match your screenshot)

 Title is dynamic: Department + Quarter + Year + “KPIs One Pager”

 Dark navy header row with white text

 Each row has 4 blue tiles (rectangles) with white text

 First label shows “1. People First”, “2. Value Driven”, etc.

 Gallery rows expand—FlexibleHeight = true, labels AutoHeight = true

If you want, share your control names (gallery name + whether your headers are in a container), and I’ll paste an exact list of property values you can copy straight into each control.

5555555555555555555555555555555555555555555555555555

Toubleshooting.

1) Prove the view has data

Add a temporary Label anywhere and set Text to:

CountRows('kpi.vKPI_OnePager')


If this is 0 or an error → the view isn’t connected/permissions/refresh issue. In the Data pane, refresh the SQL connection, or run in SSMS:

SELECT * FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;


(You should get rows.)

2) Check your filter values (the 3 variables)

Add three Labels showing what the app is filtering with:

varDept
varQuarter
Text(varYear)


Expected: EDG, Q3, 2025 (or whatever you select).

If any label is blank or wrong:

Dept dropdown OnChange must be:
Set(varDept, ddDept.Selected.DeptCode)

Quarter dropdown OnChange must be:
Set(varQuarter, ddQuarter.Selected.Q) ← use .Q if you built the quarters with Table({Q:"Q1"},...)

Year dropdown OnChange must be:
Set(varYear, ddYear.Selected.Y) ← use .Y if using kpi.vYears

Also: make sure App → OnStart ran (click Run OnStart).

3) Prove the filter step-by-step

Add one more Label and try these (one at a time):

All rows for selected Dept:

CountRows( Filter('kpi.vKPI_OnePager', DeptCode = varDept) )


Dept + Year:

CountRows( Filter('kpi.vKPI_OnePager', DeptCode = varDept && Year = varYear) )


Dept + Year + Quarter:

CountRows( Filter('kpi.vKPI_OnePager', DeptCode = varDept && Year = varYear && Quarter = varQuarter) )


If you get a number at step 1 but 0 at step 3, the mismatch is Year or Quarter datatype.

Fix datatype mismatches quickly

If your Year is text in the view (rare), use:

In gallery Items filter: Text(Year) = Text(varYear)

If your Quarter in dropdown is a record or has spaces, be sure you used .Q:

Set(varQuarter, ddQuarter.Selected.Q)

4) Confirm gallery Items formula uses the exact view name

Set galRows.Items to:

With(
    { src: 'kpi.vKPI_OnePager' },   // use your exact name from the Data pane
    SortByColumns(
        Filter(src,
            DeptCode = varDept &&
            Year     = varYear &&
            Quarter  = varQuarter
        ),
        "PillarDisplayOrder",
        SortOrder.Ascending
    )
)


If your Data pane shows e.g. kpi_vKPI_OnePager_1, use that exact name.

5) Most common gotchas (quick fixes)

Quarter: you built colQuarters as Table({Q:"Q1"},...) but your OnChange is ddQuarter.Selected (missing .Q). → Use .Q.

Year: your Years collection uses a field Y, but OnChange uses ddYear.Selected.Result. → Use .Y.

Dept: OnChange sets varDept = ddDept.Selected.Department (the name) instead of DeptCode. → Use .DeptCode.

Didn’t run OnStart: collections are empty, so dropdowns show but variables never change. → Click App → Run OnStart.

New SQL object not refreshed: after creating kpi.vYears or the main view, click the … on the SQL connection → Refresh.

If you want me to zero in:

Reply with what each of these shows (paste numbers/text):

CountRows('kpi.vKPI_OnePager')

varDept, varQuarter, Text(varYear)

CountRows(Filter('kpi.vKPI_OnePager', DeptCode = varDept && Year = varYear && Quarter = varQuarter))


cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

Quick checks (run in SSMS)
-- Do we have pillars & objectives?
SELECT COUNT(*) AS Pillars FROM kpi.Pillar;
SELECT COUNT(*) AS Objectives FROM kpi.Objective;

-- Do all Priorities point to a real Objective?
SELECT p.PriorityID, p.ObjectID
FROM kpi.Priority p
LEFT JOIN kpi.Objective o ON o.ObjectID = p.ObjectID
WHERE o.ObjectID IS NULL;   -- <-- if any rows return, priorities reference missing objectives

-- Does the view have rows for your selection?
SELECT * FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;

Fix / seed (safe to run if Pillar/Objectives are empty)
-- Seed the 4 pillars (if missing)
IF NOT EXISTS (SELECT 1 FROM kpi.Pillar)
BEGIN
  INSERT INTO kpi.Pillar (PillarID, Pillar, DisplayOrder) VALUES
  ('PIL001','People First',1),
  ('PIL002','Value Driven',2),
  ('PIL003','Consumer Centered',3),
  ('PIL004','Growth Minded',4);
END

-- Seed objectives (if missing)
IF NOT EXISTS (SELECT 1 FROM kpi.Objective)
BEGIN
  INSERT INTO kpi.Objective (ObjectID, Objective, PillarID, DisplayOrder) VALUES
  ('OBJ0001','Empowerment','PIL001',1),
  ('OBJ0002','Collaboration','PIL001',2),
  ('OBJ0003','Celebration','PIL001',3),
  ('OBJ0004','Product Delivery','PIL002',1),
  ('OBJ0005','Stewardship','PIL002',2),
  ('OBJ0006','Ease of use','PIL003',1),
  ('OBJ0007','Frictionless experience','PIL003',2),
  ('OBJ0008','Modernization (M)','PIL004',1),
  ('OBJ0009','Purposeful Transformation (PT)','PIL004',2);
END

-- If any Priority rows are missing a valid Objective, fix them by mapping to one:
-- (example: map EDG priorities to reasonable objectives—adjust as needed)
UPDATE p SET ObjectID='OBJ0001' WHERE DeptCode='EDG' AND ObjectID NOT IN (SELECT ObjectID FROM kpi.Objective) AND p.PriorityID='PRI0001';
UPDATE p SET ObjectID='OBJ0004' WHERE DeptCode='EDG' AND ObjectID NOT IN (SELECT ObjectID FROM kpi.Objective) AND p.PriorityID='PRI0002';
UPDATE p SET ObjectID='OBJ0006' WHERE DeptCode='EDG' AND ObjectID NOT IN (SELECT ObjectID FROM kpi.Objective) AND p.PriorityID='PRI0003';
UPDATE p SET ObjectID='OBJ0008' WHERE DeptCode='EDG' AND ObjectID NOT IN (SELECT ObjectID FROM kpi.Objective) AND p.PriorityID='PRI0004';

-- Optional: seed a KPI under each priority (so the 4th column isn’t empty)
IF NOT EXISTS (SELECT 1 FROM kpi.KPI)
BEGIN
  INSERT INTO kpi.KPI (KPIID, KPI, PriorityID, DisplayOrder) VALUES
  ('KPI0001','Each leader uses Cherish/Replenish in at least 1 MOR','PRI0001',1),
  ('KPI0002','Define provider critical data elements + rules + ownership','PRI0002',1),
  ('KPI0003','Standardize reporting of data quality issues in ServiceNow','PRI0003',1),
  ('KPI0004','Finalize vendor for Data Catalog (end of Q3)','PRI0004',1);
END

After seeding

66666666666666666666666666666666666666666666666666666666666666666666666666

FROM kpi.Pillar pil
JOIN (SELECT DISTINCT ObjectID, DeptCode, [Year], [Quarter] FROM kpi.Priority) p
...
If kpi.Pillar has 0 rows, the whole view returns 0 rows even if Priority/Objective have data.

Quick confirm (run these)
sql
Copy code
SELECT COUNT(*) AS Pillars FROM kpi.Pillar;
SELECT COUNT(*) AS Objectives FROM kpi.Objective;
SELECT COUNT(*) AS Priorities_EDG_2025_Q3
FROM kpi.Priority
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3';
One-shot fix (safe to run if Pillar/Objective are missing)
sql
Copy code
-- Seed the 4 pillars (idempotent)
IF NOT EXISTS (SELECT 1 FROM kpi.Pillar)
BEGIN
  INSERT INTO kpi.Pillar (PillarID, Pillar, DisplayOrder) VALUES
  ('PIL001','People First',1),
  ('PIL002','Value Driven',2),
  ('PIL003','Consumer Centered',3),
  ('PIL004','Growth Minded',4);
END

-- Seed objectives (idempotent)
IF NOT EXISTS (SELECT 1 FROM kpi.Objective)
BEGIN
  INSERT INTO kpi.Objective (ObjectID, Objective, PillarID, DisplayOrder) VALUES
  ('OBJ0001','Empowerment','PIL001',1),
  ('OBJ0002','Collaboration','PIL001',2),
  ('OBJ0003','Celebration','PIL001',3),
  ('OBJ0004','Product Delivery','PIL002',1),
  ('OBJ0005','Stewardship','PIL002',2),
  ('OBJ0006','Ease of use','PIL003',1),
  ('OBJ0007','Frictionless experience','PIL003',2),
  ('OBJ0008','Modernization (M)','PIL004',1),
  ('OBJ0009','Purposeful Transformation (PT)','PIL004',2);
END
Then validate the view for your selection:

sql
Copy code
SELECT * 
FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;

77777777777777777777777777777777777777777777777777777777777777777777

A) Prove the view itself returns rows

Run in SSMS:

SELECT * 
FROM kpi.vKPI_OnePager
WHERE DeptCode='EDG' AND [Year]=2025 AND [Quarter]='Q3'
ORDER BY PillarDisplayOrder;


If you see 4 rows, proceed to B.

B) Prove the Power Apps connection shows rows with no filter

Select your gallery → set Items to exactly the view (no Filter, no Sort):

'kpi.vKPI_OnePager'   // use your exact data-source name as shown in the Data pane


If nothing shows: the data-source name is wrong or the connector needs Refresh (… on the SQL connection → Refresh). Also verify the app is using the same database you seeded.

If rows show, go to C.

C) Hard-code the filter first (avoid variables)

Replace Items with:

Filter(
    'kpi.vKPI_OnePager',
    DeptCode = "EDG" &&
    Year     = 2025  &&
    Trim(Quarter) = "Q3"
)


If this works → your variables or dropdown bindings are off (go to D).

If this returns 0 → Year/Quarter types might differ. Try:

Filter(
    'kpi.vKPI_OnePager',
    DeptCode = "EDG" &&
    Text(Year) = "2025" &&
    Trim(Quarter) = "Q3"
)


If that works, keep using Text(Year) (means Year is coming through as text for this connector).

D) Rebind to variables carefully (watch field names)

First, show the variables on-screen (temporary labels):

Text = varDept

Text = varQuarter

Text = Text(varYear)

Then set Items to:

With(
    { src: 'kpi.vKPI_OnePager' },
    Filter(
        src,
        DeptCode = varDept &&
        // use ONE of the two lines below (whichever worked in C)
        Year = varYear,              // if the hard-coded numeric version worked
        // Text(Year) = Text(varYear), // if the text version worked
        Trim(Quarter) = Trim(varQuarter)
    )
)

Common miswires to fix

Dept dropdown OnChange must be:

Set(varDept, ddDept.Selected.DeptCode)


(Not Selected.Department.)

Quarter dropdown (if you built quarters with Table({Q:"Q1"},...)):

Set(varQuarter, ddQuarter.Selected.Q)


Year dropdown (if using kpi.vYears with field Y):

Set(varYear, ddYear.Selected.Y)


OnStart not run: after changing OnStart, click App → Run OnStart, or close/reopen the app.

Data source name mismatch: in the Data pane the view might be kpi_vKPI_OnePager or kpi_vKPI_OnePager_1. Use that exact name (with quotes only if it contains a dot).

E) Final polish (after data appears)

Re-add the Sort:

SortByColumns(
    Filter('kpi.vKPI_OnePager',
        DeptCode = varDept &&
        Year = varYear &&           // or Text(Year) = Text(varYear)
        Trim(Quarter) = Trim(varQuarter)
    ),
    "PillarDisplayOrder",
    SortOrder.Ascending
)

If it’s still blank after B or C

Please tell me:

The exact name of the view as it appears in the Data pane.

What C returns (hard-coded filter: rows or 0? and which of the Year versions works).

What your three debug labels show for varDept, varQuarter, varYear.

With those three facts I can give you the one-line Items formula that will work in your app.


