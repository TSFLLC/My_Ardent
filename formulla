
// Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", Ascending)
);

// Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", Ascending)
);

// Years (pull only the Year field, then Distinct and sort by Result)
ClearCollect(
    colYears,
    Sort(
        Distinct(
            ShowColumns('kpi.vKPI_OnePager', "Year"),
            "Year"
        ),
        Result,
        Descending
    )
);

// Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);

-------------------------------------------------------

IfError(
    CountRows( FirstN( 'kpi.Department', 1 ) ),
    "READ ERROR: " & ErrorInfo.Message,
    "OK: can read"
)

------------------------------------------------

Try a tiny gallery

Insert → Gallery → Vertical.

Items = FirstN('kpi.Department', 5)

Set a label inside to ThisItem.Department (or the real column name).

If it renders rows, PA can read.

Use Monitor to see the exact failure

App → Monitor → Play the app → watch the connector call.

Look for HTTP 401/403 (auth/permission), 500 (SQL error), or gateway errors.

Check the connector itself

Data pane → the SQL source → … → Details.
If you see a red X, click it—PA will show the connection/gateway error.

-------------------------------------------------------------------------
Concurrent(
    Set(varDeptTest, IfError(CountRows(FirstN('kpi.Department',1)), ErrorInfo.Message, "OK")),
    Set(varPillarTest, IfError(CountRows(FirstN('kpi.Pillar',1)), ErrorInfo.Message, "OK")),
    Set(varOnePagerTest, IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)), ErrorInfo.Message, "OK"))
);
------------------------------------------------------------------------

"Department: " & varDeptTest & " | Pillar: " & varPillarTest & " | OnePager: " & varOnePagerTest


-------------------------------------------------------------------------

// --- Departments
ClearCollect(
    colDepts,
    SortByColumns(
        'kpi.Department',
        "Department",
        SortOrder.Ascending
    )
);

// --- Pillars
ClearCollect(
    colPillars,
    SortByColumns(
        'kpi.Pillar',
        "Pillar",
        SortOrder.Ascending
    )
);

// --- Years (Distinct → rename 'Result' → sort by 'Year')
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct('kpi.vKPI_OnePager', 'Year'),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// --- Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);


---------------------------------------------------------------------

// --- Years (Distinct -> rename 'Result' -> sort by 'Year')
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct('kpi.vKPI_OnePager', Year),   // <-- no quotes around Year
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);


----------------------------------------------------------------------
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct( ShowColumns('kpi.vKPI_OnePager', "Year"), Year ),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);
-----------------------------
CREATE VIEW [kpi].[vwYears] AS
SELECT DISTINCT [Year] FROM [kpi].[vKPI_OnePager];
------------------------------

ClearCollect(
    colYears,
    SortByColumns('kpi.vwYears', "Year", SortOrder.Descending)
);


----------------------------------------------------------

// ===== Defaults (optional) =====
Set(varToday, Today());
Set(varYear, Year(varToday));
Set(
    varQuarter,
    With({ m: Month(varToday) },
        If(m <= 3, "Q1", If(m <= 6, "Q2", If(m <= 9, "Q3", "Q4")))
    )
);
Set(varDept, "EDG");

// ===== Departments =====
ClearCollect(
    colDepts,
    SortByColumns(
        'kpi.Department',
        "Department",
        SortOrder.Ascending
    )
);

// ===== Pillars =====
ClearCollect(
    colPillars,
    SortByColumns(
        'kpi.Pillar',
        "Pillar",
        SortOrder.Ascending
    )
);

// ===== Years (resilient: tries Year, then FiscalYear, then a ShowColumns fallback) =====
Clear(colYears);
Collect(
    colYears,
    IfError(
        // Try a column literally named Year
        SortByColumns(
            RenameColumns(
                Distinct('kpi.vKPI_OnePager', Year),
                "Result",
                "Year"
            ),
            "Year",
            SortOrder.Descending
        ),
        IfError(
            // Fallback: column named FiscalYear
            SortByColumns(
                RenameColumns(
                    Distinct('kpi.vKPI_OnePager', FiscalYear),
                    "Result",
                    "Year"
                ),
                "Year",
                SortOrder.Descending
            ),
            // Final fallback: pull just "Year" via ShowColumns and then Distinct
            SortByColumns(
                RenameColumns(
                    Distinct(
                        ShowColumns('kpi.vKPI_OnePager', "Year"),
                        Year
                    ),
                    "Result",
                    "Year"
                ),
                "Year",
                SortOrder.Descending
            )
        )
    )
);

// ===== Quarters =====
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);

// ===== Quick connection diagnostics (optional) =====
Set(varDeptTest,   IfError(CountRows(FirstN('kpi.Department',1)),   "ERR", "OK"));
Set(varPillarTest, IfError(CountRows(FirstN('kpi.Pillar',1)),       "ERR", "OK"));
Set(varOPTest,     IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)),"ERR", "OK"));


----------------------------------------------------------------------------------

// ===== Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// ===== Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// ===== Years (record-scoped Distinct avoids the Year() / reserved-name issue)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(
                'kpi.vKPI_OnePager' As op,
                op.'Year'                 // <-- important: record-scoped field reference
            ),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// ===== Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);

***************************************************************************
-- in your KPI database
CREATE OR ALTER VIEW [kpi].[vKPIOnePager_PA] AS
SELECT
    Department,
    DeptCode,
    CAST([Year] AS int) AS KPIYear,  -- alias fixes the PA "Year" issue
    Quarter,
    PillarID,
    Pillar,
    ObjectivesText,
    PrioritiesText,
    KPIsText,
    Leader
FROM [kpi].[vKPI_OnePager];  -- your existing view


****************************************************
// Departments
ClearCollect(colDepts,   SortByColumns('kpi.Department', "Department", SortOrder.Ascending));
// Pillars
ClearCollect(colPillars, SortByColumns('kpi.Pillar',     "Pillar",     SortOrder.Ascending));

// Years (from alias KPIYear)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct('kpi.vKPIOnePager_PA', KPIYear),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// Quarters
ClearCollect(colQuarters, ["Q1","Q2","Q3","Q4"]);

888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

// Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// Years (create a safe column _Yr from the record-scoped 'Year', then Distinct on it)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(
                AddColumns('kpi.vKPI_OnePager' As op, "_Yr", op.'Year'),
                "_Yr"
            ),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// Quarters
ClearCollect(colQuarters, ["Q1","Q2","Q3","Q4"]);

// Optional quick check
Set(varOPTest, IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)), "ERR", "OK"));

================================================================================

Mid(
  JSON( First('kpi.vKPI_OnePager') ),
  1, 4000
)


------------------------------------------------------------------------------
// Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// Years (create a safe _Yr from whatever PA calls your year column)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(
                AddColumns(
                    'kpi.vKPI_OnePager' As op,
                    "_Yr",
                    op.{YearField}        // <-- REPLACE with the exact name, e.g. op.'Year' or op.Year1
                ),
                "_Yr"
            ),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);

----------------------------------------------------------------------------

// ===== Defaults (optional)
Set(varToday, Today());
Set(varYear, Year(varToday));
Set(varQuarter, With({m: Month(varToday)}, If(m<=3,"Q1", If(m<=6,"Q2", If(m<=9,"Q3","Q4")))));
Set(varDept, "EDG");

// ===== Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// ===== Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// ===== Years (build a safe column from the view's Year, then Distinct → rename → sort)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(
                AddColumns(
                    'kpi.vKPI_OnePager' As op,
                    "_Yr", op.'Year'              // <<— this is the key line (record-scoped field)
                ),
                "_Yr"
            ),
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// ===== Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);

// ===== Optional quick connector check
Set(varDeptTest,   IfError(CountRows(FirstN('kpi.Department',1)),   "ERR","OK"));
Set(varPillarTest, IfError(CountRows(FirstN('kpi.Pillar',1)),       "ERR","OK"));
Set(varOPTest,     IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)),"ERR","OK"));

----------------------------------------------------------------------------------------------------------



// ===== Defaults (optional)
Set(varToday, Today());
Set(varYear, Year(varToday));
Set(varQuarter, With({m: Month(varToday)}, If(m<=3,"Q1", If(m<=6,"Q2", If(m<=9,"Q3","Q4")))));
Set(varDept, "EDG");

// ===== Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// ===== Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// ===== Years  (build a safe _Yr from the view's Year, then Distinct → rename → sort)
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(
                AddColumns(
                    'kpi.vKPI_OnePager' As op,
                    "_Yr", op.'Year'          // create helper column from Year
                ),
                _Yr                          // <-- NO QUOTES here
            ),
            "Result", "Year"                 // rename Distinct's output column to Year
        ),
        "Year",
        SortOrder.Descending
    )
);

// ===== Quarters
ClearCollect(
    colQuarters,
    ["Q1","Q2","Q3","Q4"]
);



-------------------------------------------------------------------------------------------------------------------
// ===== Optional quick connector check
Set(varDeptTest,   IfError(CountRows(FirstN('kpi.Department',1)),   "ERR","OK"));
Set(varPillarTest, IfError(CountRows(FirstN('kpi.Pillar',1)),       "ERR","OK"));
Set(varOPTest,     IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)),"ERR","OK"));


// Departments
ClearCollect(
    colDepts,
    SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
);

// Pillars
ClearCollect(
    colPillars,
    SortByColumns('kpi.Pillar', "Pillar", SortOrder.Ascending)
);

// ---- YEAR LIST (robust 2-step) ----
// 1) Project ONLY the Year field into a lightweight collection (_Yr)
Clear(colYearsRaw);
Collect(
    colYearsRaw,
    ForAll('kpi.vKPI_OnePager',
        { _Yr: ThisRecord.'Year' }   // record-scoped reference avoids the reserved-word issue
    )
);

// 2) Deduplicate & sort → final Year list for dropdowns
ClearCollect(
    colYears,
    SortByColumns(
        RenameColumns(
            Distinct(colYearsRaw, _Yr),    // no quotes here
            "Result", "Year"
        ),
        "Year",
        SortOrder.Descending
    )
);

// Quarters
ClearCollect(colQuarters, ["Q1","Q2","Q3","Q4"]);

// Optional quick connector checks
Set(varDeptTest,   IfError(CountRows(FirstN('kpi.Department',1)),   "ERR","OK"));
Set(varPillarTest, IfError(CountRows(FirstN('kpi.Pillar',1)),       "ERR","OK"));
Set(varOPTest,     IfError(CountRows(FirstN('kpi.vKPI_OnePager',1)),"ERR","OK"));
444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444

2) Set their properties

ddDept (Departments)

Items

SortByColumns('kpi.Department', "Department", SortOrder.Ascending)


Value (display field) → Department

Default (optional) → "EDG"

ddYear (Years)

Items

SortByColumns(
    RenameColumns(
        Distinct('kpi.vKPI_OnePager' As r, r.'Year'),
        "Result", "Year"
    ),
    "Year",
    SortOrder.Descending
)


Value (display field) → Year

Default (optional) → Year(Today())

ddQuarter (Quarters)

Items

["Q1","Q2","Q3","Q4"]


Default (optional)

With({m: Month(Today())}, If(m<=3,"Q1", If(m<=6,"Q2", If(m<=9,"Q3","Q4"))))

3) Quick sanity label (shows what’s selected)

Add a Label, set Text to:

"Dept=" & ddDept.Selected.Department &
" | Year=" & ddYear.Selected.Year &
" | Quarter=" & Coalesce(ddQuarter.Selected.Value, ddQuarter.SelectedText.Value)

4) Example of filtering your data with these picks
// e.g., Gallery Items for KPI rows
Filter(
  'kpi.vKPI_OnePager' As r,
  r.DeptCode = ddDept.Selected.DeptCode &&
  r.'Year'   = ddYear.Selected.Year &&
  r.Quarter  = Coalesce(ddQuarter.Selected.Value, ddQuarter.SelectedText.Value)
)


If any field name turns red, it’s just a name mismatch—use your JSON trick again (JSON(First('kpi.vKPI_OnePager'))) to confirm the exact column names and update the formulas accordingly.


-----------------------------------------------------------------------------------------------------------------------------

If you inserted the classic Drop down control

Rename it ddYear.

Set Items to:

Sort(
    Distinct('kpi.vKPI_OnePager' As r, r.'Year'),
    Result,
    Descending
)


Set the dropdown’s Value property to:

"Result"


(Classic Drop down shows the column named in Value. Distinct returns a single column called Result.)

If you inserted the modern Dropdown control

Modern dropdowns expect a single column named Value.

Rename it ddYear.

Set Items to:

SortByColumns(
    RenameColumns(
        Distinct('kpi.vKPI_OnePager' As r, r.'Year'),
        "Result", "Value"
    ),
    "Value",
    SortOrder.Descending
)


(Here we rename Result → Value so the control is happy—no need to touch the Value property.)

Quick sanity checks

Add a label and set Text to:

CountRows( Distinct('kpi.vKPI_OnePager' As r, r.'Year') )


If that shows a number (not an error), the formula is valid.

If the Items formula compiles but the dropdown shows blank text, it means you’re using the wrong control recipe (classic vs modern). Switch to the other recipe above.

Dept & Quarter (copy–paste)

Department – classic Drop down

Items:  SortByColumns('kpi.Department', "Department", SortOrder.Ascending)
Value:  "Department"


Department – modern Dropdown

Items:
SortByColumns(
  RenameColumns('kpi.Department', "Department", "Value"),
  "Value",
  SortOrder.Ascending
)


Quarter (both controls)

Items: ["Q1","Q2","Q3","Q4"]
