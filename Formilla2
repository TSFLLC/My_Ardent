Do this now (step-by-step)
1) Make sure the shared variables exist

In App.OnStart (then App → Run OnStart):

Set(vDeptCode, "EDG");
Set(vYear, Year(Today()));
Set(vQuarter, With({m: Month(Today())}, If(m<=3,"Q1", If(m<=6,"Q2", If(m<=9,"Q3","Q4")))));

2) Create the OnePager screen

Insert → Screen → rename to scrOnePager.

(If you copied dropdowns here already, great. If not, add the 3 classic Drop down controls and name them ddDept_OP, ddYear_OP, ddQuarter_OP.)

Hook the OnePager dropdowns to the variables:

ddDept_OP

Items: SortByColumns('kpi.Department', "Department", SortOrder.Ascending)

Value: "Department"

Default: LookUp('kpi.Department', DeptCode = vDeptCode, Department)

OnChange: Set(vDeptCode, Self.Selected.DeptCode)

ddYear_OP

Items: SortByColumns('kpi.vKPI_Years', "KPIYear", SortOrder.Descending)

Value: "KPIYear"

Default: vYear

OnChange: Set(vYear, Value(Self.Selected.KPIYear))

ddQuarter_OP

Items: ["Q1","Q2","Q3","Q4"] (or your dynamic quarter list)

Default: vQuarter

OnChange: Set(vQuarter, Self.Selected.Value)

(Optional header label at top)

LookUp('kpi.Department', DeptCode = vDeptCode, Department)
& " " & vQuarter & " " & Text(vYear) & " KPIs One Pager"

3) Insert the galRows gallery (the 4×4 one-pager)

Insert → Gallery → Flexible height (vertical) → rename to galRows.

Set Items to this (this is the code you asked where to load it):

SortByColumns(
  Filter(
    'kpi.vKPI_OnePagerUX',
    DeptCode = vDeptCode,
    KPIYear  = vYear,
    IsBlank(vQuarter) || Quarter = vQuarter
  ),
  "Pillar",
  SortOrder.Ascending
)

4) Add the 4 columns inside each row

While galRows is selected, insert 4 Labels and rename them:

lblPillar, lblObj, lblPri, lblKpi

Text for each:

lblPillar.Text = ThisItem.Pillar
lblObj.Text    = ThisItem.ObjectivesText
lblPri.Text    = ThisItem.PrioritiesText
lblKpi.Text    = ThisItem.KPIsText


Layout (make 4 equal columns)

For all 4: Wrap = true, AutoHeight = true, Y = 8, Padding = 8, BorderThickness = 1

Width for all: Parent.TemplateWidth/4 - 16

X positions:

lblPillar.X = 8
lblObj.X    = Parent.TemplateWidth/4 + 8
lblPri.X    = Parent.TemplateWidth/2 + 8
lblKpi.X    = Parent.TemplateWidth*3/4 + 8


Row height so it grows to tallest cell:

galRows.TemplateSize =
    Max(lblPillar.Height, lblObj.Height, lblPri.Height, lblKpi.Height) + 24

5) Add the header row (column titles)

Insert 4 Labels above the gallery with the same X/Width formulas as the cells.
Texts:

“Ardent Pillar”

“TCS Objectives”

“Enterprise D&A Priorities”

“EDG KPIs”

(Style: bold, light fill, border 1.)

6) (Optional) Color mapping by Pillar (polish)

Add once (App.OnStart, then Run OnStart):

ClearCollect(
  colPillarColors,
  { Pillar:"People First",       Hex:"#0F4C81" },
  { Pillar:"Value Driven",       Hex:"#005EAA" },
  { Pillar:"Consumer Centered",  Hex:"#008B8B" },
  { Pillar:"Growth Minded",      Hex:"#6A4C93" }
);


Then:

lblPillar.Fill

With({c: ColorValue(LookUp(colPillarColors, Pillar = ThisItem.Pillar, "#0F4C81"))}, c)


lblObj.Fill, lblPri.Fill, lblKpi.Fill

With({c: ColorValue(LookUp(colPillarColors, Pillar = ThisItem.Pillar, "#0F4C81"))},
    ColorFade(c, 0.85)
)


lblObj.BorderColor / lblPri.BorderColor / lblKpi.BorderColor

With({c: ColorValue(LookUp(colPillarColors, Pillar = ThisItem.Pillar, "#0F4C81"))},
    ColorFade(c, -0.30)
)

7) Update Screen1 (list) or hide it

If you keep Screen1’s gallery, set its Items to the same formula as galRows (using vDeptCode/vYear/vQuarter).

Or set Screen1.Visible = false if you only want OnePager.

------------------------------------------------------------------

1) Quick sanity (do these 10 seconds)

Drop a label and set:

"Dept=" & vDeptCode & " | Year=" & vYear & " | Q=" & Coalesce(vQuarter,"<blank>")


Another label (does the view have data at all?):

CountRows('kpi.vKPI_OnePagerUX')


First row (raw, no filter):

Mid(JSON(First('kpi.vKPI_OnePagerUX')),1,2000)


This shows you the exact column names (e.g., KPIYear, KPIsText).

2) Set galRows.Items to this robust grouped formula

Paste exactly (into galRows → Items). It coerces Year to text, trims Quarter, groups by pillar, and aggregates the text—so the one-pager matches your “main screen”.

With(
    {
        base: Filter(
                'kpi.vKPI_OnePagerUX',
                DeptCode = vDeptCode,
                Text(KPIYear) = Text(vYear),                                       // handles text vs number
                IsBlank(vQuarter) || Lower(Trim(Quarter)) = Lower(Trim(vQuarter))  // handles casing/spaces
              )
    },
    SortByColumns(
        AddColumns(
            GroupBy(base, "Pillar", "rows"),   // one row per pillar
            "_ord",
            Switch(
                Lower(Trim(Pillar)),
                "people first",        1,
                "value driven",        2,
                "consumer centered",   3,
                "growth minded",       4,
                999
            ),
            "ObjectivesAgg", Concat(rows, Coalesce(ObjectivesText,""), Char(10)),
            "PrioritiesAgg", Concat(rows, Coalesce(PrioritiesText,""), Char(10)),
            "KPIAgg",        Concat(rows, Coalesce(KPIsText,""),      Char(10))
        ),
        "_ord",
        SortOrder.Ascending
    )
)


If your field names differ (e.g., KPIText vs KPIsText), change those three names in the Concat(...) lines to match what you saw in the JSON from step 1.

3) Point your 4 cell labels at the aggregated fields

Inside galRows:

lblPillar.Text = ThisItem.Pillar
lblObj.Text    = ThisItem.ObjectivesAgg
lblPri.Text    = ThisItem.PrioritiesAgg
lblKpi.Text    = ThisItem.KPIAgg


Ensure Wrap = true and AutoHeight = true on all four.

Gallery auto-height:

// galRows.TemplateSize
Max(lblPillar.Height, lblObj.Height, lblPri.Height, lblKpi.Height) + 24

4) If it’s still null

Try with Quarter ignored to confirm Dept+Year work:

With(
 { base: Filter('kpi.vKPI_OnePagerUX', DeptCode=vDeptCode, Text(KPIYear)=Text(vYear)) },
 CountRows(base)
)


If that returns 0: either the DeptCode/Year don’t exist in the view or the column names differ. Use the raw JSON (Mid(JSON(First('kpi.vKPI_OnePagerUX')),1,2000)) to confirm exact names, then update the formula accordingly.

Also make sure you ran App → Run OnStart after setting vDeptCode/vYear/vQuarter, and that your quarter actually exists for that Dept+Year (use Q3 if that’s where the data is).

Apply the formula above and your second screen will aggregate per pillar and match the first screen’s content.

You said:
which label should i dropped and what to set?
Drop a label and set:
You said:
which label should i dropped and what to set? Drop a label and set:
ChatGPT said:
Thought for 21s

Use a plain Label control (Insert → Label), placed outside the gallery (anywhere on the screen). It’s just for debugging, so you can delete it later.

Add 3 quick debug labels:

1) Variables snapshot

Name: lblDbgVars
Text (property):

"Dept=" & vDeptCode & " | Year=" & vYear & " | Q=" & Coalesce(vQuarter,"<blank>")

2) See the column names coming from the view

Name: lblDbgFirst
Text:

Mid( JSON( First('kpi.vKPI_OnePagerUX') ), 1, 2000 )


This should show a JSON blob with the exact field names (e.g., KPIYear, KPIsText, etc.). If it shows null, the view has no rows at all.

3) Count rows for your current filters

Name: lblDbgCount
Text:

CountRows(
  Filter(
    'kpi.vKPI_OnePagerUX',
    DeptCode = vDeptCode,
    Text(KPIYear) = Text(vYear),
    IsBlank(vQuarter) || Lower(Trim(Quarter)) = Lower(Trim(vQuarter))
  )
)


(Optional) Which quarters exist for the selected Dept/Year:

With(
  {
    t: SortByColumns(
         Distinct(
           Filter('kpi.vKPI_OnePagerUX',
                  DeptCode = vDeptCode,
                  Text(KPIYear) = Text(vYear)),
           Quarter),
         "Result", SortOrder.Ascending)
  },
  If(CountRows(t)=0, "Quarters: none", "Quarters: " & Concat(t, Result, ", "))
)


These labels will tell us:

What values your filters are using (lblDbgVars)

The exact column names returned from SQL (lblDbgFirst)

Whether your current selection actually returns rows (lblDbgCount)

Once things look good, delete the debug labels.
